// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*
 * Inventory API for the Canonical Web App
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package service

import (
	"context"
	"fmt"
	"net/http"
	"os"
)

// InventoryApiService is a service that implements the logic for the InventoryApiServicer
// This service should implement the business logic for every endpoint for the InventoryApi API.
// Include any external packages or services that will be required by this service.
type InventoryApiService struct {
	db DatabaseBackend
}

// NewInventoryApiService creates a default api service
func NewInventoryApiService() InventoryApiServicer {
	projectID := os.Getenv("PROJECT_ID")
	backend := NewFirestoreBackend(projectID)
	return &InventoryApiService{backend}
}

// DeleteItem - Delete Item by ID
func (s *InventoryApiService) DeleteItem(id string, w http.ResponseWriter) error {
	ctx := context.Background()
	err := s.db.DeleteItem(ctx, id)
	if err != nil {
		return err
	}

	return EncodeJSONStatus(http.StatusOK, "item deleted", w)
}

// DeleteLocation - Delete Location by ID
func (s *InventoryApiService) DeleteLocation(id string, w http.ResponseWriter) error {
	ctx := context.Background()
	err := s.db.DeleteLocation(ctx, id)
	if err != nil {
		return err
	}

	return EncodeJSONStatus(http.StatusOK, "location deleted", w)
}

// GetInventoryTransaction - Get Inventory Transaction by ID
func (s *InventoryApiService) GetInventoryTransaction(id string, w http.ResponseWriter) error {
	ctx := context.Background()
	txn, err := s.db.GetInventoryTransaction(ctx, id)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(txn, nil, w)
}

// GetItem - Get Item by ID
func (s *InventoryApiService) GetItem(id string, w http.ResponseWriter) error {
	ctx := context.Background()
	r, err := s.db.GetItem(ctx, id)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(r, nil, w)
}

// GetLocation - Get Location by ID
func (s *InventoryApiService) GetLocation(id string, w http.ResponseWriter) error {
	ctx := context.Background()
	r, err := s.db.GetLocation(ctx, id)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(r, nil, w)
}

// ListInventoryTransactions - List all Inventory Transactions
func (s *InventoryApiService) ListInventoryTransactions(w http.ResponseWriter) error {
	ctx := context.Background()
	l, err := s.db.ListInventoryTransactions(ctx)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(l, nil, w)
}

// ListItemInventory - List all Inventory of Item
func (s *InventoryApiService) ListItemInventory(id string, w http.ResponseWriter) error {
	ctx := context.Background()
	l, err := s.db.ListItemInventory(ctx, id)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(l, nil, w)
}

// ListItemInventoryTransactions
func (s *InventoryApiService) ListItemInventoryTransactions(id string, w http.ResponseWriter) error {
	ctx := context.Background()
	l, err := s.db.ListItemInventoryTransactions(ctx, id)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(l, nil, w)
}

// ListItems - List all Items
func (s *InventoryApiService) ListItems(w http.ResponseWriter) error {
	ctx := context.Background()
	l, err := s.db.ListItems(ctx)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(l, nil, w)
}

// ListLocationInventory - List all Inventory at location
func (s *InventoryApiService) ListLocationInventory(id string, w http.ResponseWriter) error {
	ctx := context.Background()
	l, err := s.db.ListLocationInventory(ctx, id)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(l, nil, w)
}

func (s *InventoryApiService) ListLocationInventoryTransactions(id string, w http.ResponseWriter) error {
	ctx := context.Background()
	l, err := s.db.ListLocationInventoryTransactions(ctx, id)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(l, nil, w)
}

// ListLocations - List all Locations
func (s *InventoryApiService) ListLocations(w http.ResponseWriter) error {
	ctx := context.Background()
	l, err := s.db.ListLocations(ctx)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(l, nil, w)
}

// NewInventoryTransaction - Create a new Inventory Transaction
func (s *InventoryApiService) NewInventoryTransaction(inventoryTransaction InventoryTransaction, w http.ResponseWriter) error {
	if inventoryTransaction.Action == "" {
		return requiredFieldMissing("action", w)
	}
	if inventoryTransaction.ItemId == "" {
		return requiredFieldMissing("item_id", w)
	}
	if inventoryTransaction.LocationId == "" {
		return requiredFieldMissing("location_id", w)
	}
	validAction := false
	for _, a := range supportedTransactionActions {
		if a == inventoryTransaction.Action {
			validAction = true
			break
		}
	}
	if !validAction {
		message := fmt.Sprintf("Unknown action: %s ", inventoryTransaction.Action)
		return EncodeJSONStatus(http.StatusBadRequest, message, w)
	}

	ctx := context.Background()
	r, err := s.db.NewInventoryTransaction(ctx, &inventoryTransaction)
	if err != nil {
		return err
	}

	status := http.StatusCreated
	return EncodeJSONResponse(r, &status, w)
}

// NewItem - Create a new Item
func (s *InventoryApiService) NewItem(item Item, w http.ResponseWriter) error {
	if item.Name == "" {
		return requiredFieldMissing("name", w)
	}

	ctx := context.Background()
	r, err := s.db.NewItem(ctx, &item)
	if err != nil {
		return err
	}

	status := http.StatusCreated
	return EncodeJSONResponse(r, &status, w)
}

// NewLocation - Create a new Location
func (s *InventoryApiService) NewLocation(location Location, w http.ResponseWriter) error {
	if location.Name == "" {
		return requiredFieldMissing("name", w)
	}
	if location.Warehouse == "" {
		return requiredFieldMissing("warehouse", w)
	}

	ctx := context.Background()
	r, err := s.db.NewLocation(ctx, &location)
	if err != nil {
		return err
	}

	status := http.StatusCreated
	return EncodeJSONResponse(r, &status, w)
}

// UpdateItem - Update Item by ID
func (s *InventoryApiService) UpdateItem(id string, item Item, w http.ResponseWriter) error {
	if id != item.Id {
		message := fmt.Sprintf("Mismatched path id: %s and item.Id: %s ", id, item.Id)
		return EncodeJSONStatus(http.StatusBadRequest, message, w)
	}
	if item.Name == "" {
		return requiredFieldMissing("name", w)
	}

	ctx := context.Background()
	r, err := s.db.UpdateItem(ctx, &item)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(r, nil, w)
}

// UpdateLocation - Update Location by ID
func (s *InventoryApiService) UpdateLocation(id string, location Location, w http.ResponseWriter) error {
	if id != location.Id {
		message := fmt.Sprintf("Mismatched path id: %s and location.Id: %s ", id, location.Id)
		return EncodeJSONStatus(http.StatusBadRequest, message, w)
	}
	if location.Name == "" {
		return requiredFieldMissing("name", w)
	}
	if location.Warehouse == "" {
		return requiredFieldMissing("warehouse", w)
	}

	ctx := context.Background()
	r, err := s.db.UpdateLocation(ctx, &location)
	if err != nil {
		return err
	}

	return EncodeJSONResponse(r, nil, w)
}

func requiredFieldMissing(name string, w http.ResponseWriter) error {
	return EncodeJSONStatus(http.StatusBadRequest, fmt.Sprintf("Empty required field: %v", name), w)
}
